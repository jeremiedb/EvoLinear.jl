var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Regressors","page":"API","title":"Regressors","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"EvoLinearRegressor","category":"page"},{"location":"api/#EvoLinear.EvoLinearRegressor","page":"API","title":"EvoLinear.EvoLinearRegressor","text":"EvoLinearRegressor(; kwargs...)\n\nloss=:mse: loss function to be minimised.    Can be one of:\n:mse\n:logistic\n:poisson\n:gamma\n:tweedie\nnrounds=10: maximum number of training rounds.\neta=1: Learning rate. Typically in the range [1e-2, 1].\nL1=0: Regularization penalty applied by shrinking to 0 weight update if update is < L1. No penalty if update > L1. Results in sparse feature selection. Typically in the [0, 1] range on normalized features.\nL2=0: Regularization penalty applied to the squared of the weight update value. Restricts large parameter values. Typically in the [0, 1] range on normalized features.\nrng=123: random seed. Not used at the moment.\nupdater=:all: training method. Only :all is supported at the moment. Gradients for each feature are computed simultaneously, then bias is updated based on all features update. \ndevice=:cpu: Only :cpu is supported at the moment.\n\n\n\n\n\n","category":"type"},{"location":"api/#Training-and-Inference","page":"API","title":"Training & Inference","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"EvoLinear.fit\nEvoLinear.predict_linear\nEvoLinear.predict_proj","category":"page"},{"location":"api/#EvoLinear.fit","page":"API","title":"EvoLinear.fit","text":"fit(config::EvoLinearRegressor;\n    x, y, w=nothing,\n    x_eval=nothing, y_eval=nothing, w_eval=nothing,\n    metric=:none,\n    print_every_n=1,\n    tol=1e-5)\n\nProvided a config, EvoLinear.fit takes x and y as features and target inputs, plus optionally w as weights and train a Linear boosted model.\n\nArguments\n\nconfig::EvoLinearRegressor: \n\nKeyword arguments\n\nx::AbstractMatrix: Features matrix. Dimensions are [nobs, num_features].\ny::AbstractVector: Vector of observed targets.\nw=nothing: Vector of weights. Can be be either a Vector or nothing. If nothing, assumes a vector of 1s. \nmetric=:none: Evaluation metric to be tracked through each iteration. Can be one of:\n:mse\n:logistic\n:poisson_deviance\n:gamma_deviance\n:tweedie_deviance\n\n\n\n\n\n","category":"function"},{"location":"api/#EvoLinear.predict_linear","page":"API","title":"EvoLinear.predict_linear","text":"predict_linear(m, x)\n\nReturns the predictions on the linear basis from model m using the features matrix x.\n\nArguments\n\nm::EvoLinearModel\nx\n\n\n\n\n\n","category":"function"},{"location":"api/#EvoLinear.predict_proj","page":"API","title":"EvoLinear.predict_proj","text":"predict_proj(m, x)\n\nReturns the predictions on the projected basis from model m using the features matrix x.\n\nMSE: predproj = predlinear\nLogistic: predproj = sigmoid(predlinear)\nPoisson: predproj = exp(predlinear)\nGamma: predproj = exp(predlinear)\nTweedie: predproj = exp(predlinear)\n\nArguments\n\nm::EvoLinearModel\nx\n\n\n\n\n\n","category":"function"},{"location":"api/#Evaluation-metrics","page":"API","title":"Evaluation metrics","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"EvoLinear.mse\nEvoLinear.mae\nEvoLinear.logloss\nEvoLinear.poisson_deviance\nEvoLinear.gamma_deviance\nEvoLinear.tweedie_deviance","category":"page"},{"location":"api/#EvoLinear.mse","page":"API","title":"EvoLinear.mse","text":"mse(p, y)\nmse(p, y, w)\n\nMean squared error evaluation metric.\n\nArguments\n\np: predicted value.\ny: observed target variable.\nw: vector of weights.\n\n\n\n\n\n","category":"function"},{"location":"api/#EvoLinear.mae","page":"API","title":"EvoLinear.mae","text":"mae(p, y)\nmae(p, y, w)\n\nMean absolute error evaluation metric.\n\nArguments\n\np: predicted value.\ny: observed target variable.\nw: vector of weights.\n\n\n\n\n\n","category":"function"},{"location":"api/#EvoLinear.logloss","page":"API","title":"EvoLinear.logloss","text":"logloss(p, y)\nlogloss(p, y, w)\n\nLogloss evaluation metric. ylog(p) + (1-y)log(1-p)\n\nArguments\n\np: predicted value. Assumes that p is on a projected basis (ie. in the [0-1] range).\ny: observed target variable.\nw: vector of weights.\n\n\n\n\n\n","category":"function"},{"location":"api/#EvoLinear.poisson_deviance","page":"API","title":"EvoLinear.poisson_deviance","text":"poisson_deviance(p, y)\npoisson_deviance(p, y, w)\n\nPoisson deviance evaluation metric. 𝐷 = 2 * (y * log(y/p) + p - y)\n\nArguments\n\np: predicted value. Assumes that p is on a projected basis (ie. in the [0-Inf] range).\ny: observed target variable.\nw: vector of weights.\n\n\n\n\n\n","category":"function"},{"location":"api/#EvoLinear.gamma_deviance","page":"API","title":"EvoLinear.gamma_deviance","text":"gamma_deviance(p, y)\ngamma_deviance(p, y, w)\n\nGamma deviance evaluation metric. 𝐷 = 2 * (log(μ/y) + y/μ - 1)\n\nArguments\n\np: predicted value. Assumes that p is on a projected basis (ie. in the [0-Inf] range).\ny: observed target variable.\nw: vector of weights.\n\n\n\n\n\n","category":"function"},{"location":"api/#EvoLinear.tweedie_deviance","page":"API","title":"EvoLinear.tweedie_deviance","text":"tweedie_deviance(p, y)\ntweedie_deviance(p, y, w)\n\nTweedie deviance evaluation metric. Fixed rho (ρ) of 1.5. 𝐷 = 2 * (y²⁻ʳʰᵒ/(1-rho)(2-rho) - yμ¹⁻ʳʰᵒ/(1-rho) + μ²⁻ʳʰᵒ/(2-rho))\n\nArguments\n\np: predicted value. Assumes that p is on a projected basis (ie. in the [0-Inf] range).\ny: observed target variable.\nw: vector of weights.\n\n\n\n\n\n","category":"function"},{"location":"#EvoLinear.jl","page":"Home","title":"EvoLinear.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ML library implementing linear boosting with L1 and L2 regularization.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For Tree based boosting, consider EvoTrees.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Supported loss functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mse (squared-error)\nlogistic (logloss) regression\npoisson\ngamma\ntweedie","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/jeremiedb/EvoLinear.jl","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Build a configuration struct with EvoLinearRegressor. Then EvoLinear.fit takes x::Matrix and y::Vector as inputs, plus optionally w::Vector as weights and fits a linear boosted model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using EvoLinear\nconfig = EvoLinearRegressor(loss=:mse, L1=1e-1, L2=1e-2, nrounds=10)\nm = EvoLinear.fit(config; x, y, metric=:mse)\np = EvoLinear.predict_proj(m, x)","category":"page"}]
}
